filt1 = unlist(strsplit(lf[j], '.csv'))
filt2 = unlist(strsplit(filt1, '_'))
dat = read.csv(lf[j], T)
if(ncol(dat) == 3){
subdat = dat[,1:3]
}else{
subdat = dat[,c(1,3,4)]
}
if( as.numeric(filt2[3])-del == 0 ){
subdat$x = -250
subdat$y = 70
}else if(as.numeric(filt2[3])-del == 1){
subdat$x = -90
subdat$y = 160
}else if(as.numeric(filt2[3])-del == 2){
subdat$x = 90
subdat$y = 160
}else if(as.numeric(filt2[3])-del == 3){
subdat$x = 250
subdat$y = 70
}else if(as.numeric(filt2[3])-del == 4){
subdat$x = 250
subdat$y = -70
}else if(as.numeric(filt2[3])-del == 5){
subdat$x = 90
subdat$y = -160
}else if(as.numeric(filt2[3])-del == 6){
subdat$x = -90
subdat$y = -160
}else if(as.numeric(filt2[3])-del == 7){
subdat$x = -250
subdat$y = -70
}
if(is.element(lf[j],  unique(result$caseid))){
print(lf[j] )
subdat$caseid = paste(lf[j], dup , sep= '+dup')
dup = dup + 1
}else{
subdat$caseid = lf[j]
}
names(subdat)[2:3] = c('HEOG', 'VEOG')
result = rbind(result, subdat)
}
names(result)[2:3] = c('HEOG', 'VEOG')
result$VEOG = as.numeric(result$VEOG)
result$HEOG = as.numeric(result$HEOG)
result$x = as.numeric(result$x)
result$y = as.numeric(result$y)
result2 = result
result2 = result2[order(result2$caseid, result2$X_Value),]
gap_V = aggregate(result2[,c('VEOG')], by = list(result2$caseid), FUN= function(x){ sliding(x,30, 0)})
gap_H = aggregate(result2[,c('HEOG')], by = list(result2$caseid), FUN= function(x){ sliding(x,30, 0)})
names(gap_V) = c('caseid', 'gap_V')
names(gap_H) = c('caseid', 'gap_H')
########################################################################
# Outlier Filtering (노이즈 제거)
result3 = unique(result2[ ,c('caseid', 'x', 'y' )])
result4 = merge(result3, gap_V, by = 'caseid', all.x =  TRUE)
result4 = merge(result4, gap_H, by = 'caseid', all.x =  TRUE)
result4$userid = sapply(strsplit(result4$caseid, split= "_" ) , "[", 1)
userlist = unique(result4$userid)
k=1
slope_x = c()
slope_y = c()
for(u in userlist){
subdat = result4[which(result4$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
cooksd_x <- cooks.distance(res_x)
cooksd_y <- cooks.distance(res_y)
subdat = subdat[-which((cooksd_y <k*mean(cooksd_y))  & (cooksd_x <k*mean(cooksd_x))),]
print(nrow(subdat))
unlink(subdat$caseid)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
}
# 시각화: 개인차 존재 확인
library(ggplot2)
slope <- rep(slope_x, rep(2, length(slope_x)))
intercept <-rep(0, length(slope))
wf <-  rep(userlist, rep(2, length(slope_x))) # rep(1:20, rep(2, length(slope_x)))  #
x <- rep(c(-1,1), length(slope_x))
y <-  rep(c(-0.001,0.001), length(slope_x))
df <- data.frame(cbind(slope,intercept,x,y))
ggplot(data=df,
aes(x,y)) +
theme_bw() +
scale_x_continuous(limits=c(-1, 1))+
scale_y_continuous(limits=c(-0.001,0.001))+
geom_abline(data=df,aes(slope=slope,intercept=intercept,colour =factor(wf)))
# 개인차 보정
fl = list.files(getwd())
result5 = result4[which(is.element(result4$caseid, fl)),]
slope_x = c()
slope_y = c()
for(u in userlist){
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
cids = subdat$caseid
for(cid in 1:length(cids)){
dat = read.csv(cids[cid], T)
if(ncol(dat)==4){
dat = dat[,c(1,3,4)]
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
amax_x = sliding2(dat[,2],30, 0)[[3]]
amin_y = sliding2(dat[,3],30, 0)[[2]]
amax_y = sliding2(dat[,3],30, 0)[[3]]
if(amin_x == 0){
dat[,2] = dat[,2] - min(dat[,2])
}else{
dat[,2] = dat[,2] - dat[amin_x,2]
}
if(amin_y == 0){
dat[,3] = dat[,3] - min(dat[,3])
}else{
dat[,3] = dat[,3] - dat[amin_y,3]
}
dat[,2] = dat[,2]/sx
dat[,3] = dat[,3]/sy
write.csv(dat,cids[cid],row.names = F )
}
}
}
userlist
cid
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
slope_x
u = userlist[2]
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
sx
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
cids = subdat$caseid
for(cid in 1:length(cids)){
dat = read.csv(cids[cid], T)
if(ncol(dat)==4){
dat = dat[,c(1,3,4)]
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
amax_x = sliding2(dat[,2],30, 0)[[3]]
amin_y = sliding2(dat[,3],30, 0)[[2]]
amax_y = sliding2(dat[,3],30, 0)[[3]]
if(amin_x == 0){
dat[,2] = dat[,2] - min(dat[,2])
}else{
dat[,2] = dat[,2] - dat[amin_x,2]
}
if(amin_y == 0){
dat[,3] = dat[,3] - min(dat[,3])
}else{
dat[,3] = dat[,3] - dat[amin_y,3]
}
dat[,2] = dat[,2]/sx
dat[,3] = dat[,3]/sy
write.csv(dat,cids[cid],row.names = F )
}
sliding2 = function(x, size = 30, wait = 150){
gap = 0
save= numeric()
list_gap = numeric()
list_amin = numeric()
list_amax = numeric()
amin2 = 0
amax2 = 0
for(i in wait:(length(x)-size+1-10)){
seemax = max(x[i:(i+size-1)])
seemin = min(x[i:(i+size-1)])
see = seemax - seemin
save = c(save, see)
if( i > wait+size ){
cond = ((see > save[length(save)-1] + 1*sd(save[-length(save)])) & (sd(save[-length(save)])>0))
if(cond){
amax = which(x[i:(i+size-1)] == seemax)[1]
amin = which(x[i:(i+size-1)] == seemin)[1]
amax2 = i + amax -1
amin2 = i + amin -1
if(amax < amin){
gap = -1*see
}else{
gap = see
}
for(n in 1:10){
seemax = max(x[(i+n):(i+n+size-1)])
seemin = min(x[(i+n):(i+n+size-1)])
amax = which(x[(i+n):(i+n+size-1)] == seemax)[1]
amin = which(x[(i+n):(i+n+size-1)] == seemin)[1]
amax2 = i+n + amax -1
amin2 = i+n + amin -1
see = seemax - seemin
if(amax < amin){
gap = -1*see
}else{
gap = see
}
}
}
}
list_gap = c(list_gap, gap)
list_amin = c(list_amin, amin2)
list_amax = c(list_amax, amax2)
}
return(  list_gap[which(abs(list_gap)== max(abs(list_gap)))][1],
list_amin[which(abs(list_gap)== max(abs(list_gap)))][1],
list_amax[which(abs(list_gap)== max(abs(list_gap)))][1] )
}
slope_x = c()
slope_y = c()
for(u in userlist){
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
cids = subdat$caseid
for(cid in 1:length(cids)){
dat = read.csv(cids[cid], T)
if(ncol(dat)==4){
dat = dat[,c(1,3,4)]
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
amax_x = sliding2(dat[,2],30, 0)[[3]]
amin_y = sliding2(dat[,3],30, 0)[[2]]
amax_y = sliding2(dat[,3],30, 0)[[3]]
if(amin_x == 0){
dat[,2] = dat[,2] - min(dat[,2])
}else{
dat[,2] = dat[,2] - dat[amin_x,2]
}
if(amin_y == 0){
dat[,3] = dat[,3] - min(dat[,3])
}else{
dat[,3] = dat[,3] - dat[amin_y,3]
}
dat[,2] = dat[,2]/sx
dat[,3] = dat[,3]/sy
write.csv(dat,cids[cid],row.names = F )
}
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
head(dat)
sliding2 = function(x, size = 30, wait = 150){
gap = 0
save= numeric()
list_gap = numeric()
list_amin = numeric()
list_amax = numeric()
amin2 = 0
amax2 = 0
for(i in wait:(length(x)-size+1-10)){
seemax = max(x[i:(i+size-1)])
seemin = min(x[i:(i+size-1)])
see = seemax - seemin
save = c(save, see)
if( i > wait+size ){
cond = ((see > save[length(save)-1] + 1*sd(save[-length(save)])) & (sd(save[-length(save)])>0))
if(cond){
amax = which(x[i:(i+size-1)] == seemax)[1]
amin = which(x[i:(i+size-1)] == seemin)[1]
amax2 = i + amax -1
amin2 = i + amin -1
if(amax < amin){
gap = -1*see
}else{
gap = see
}
for(n in 1:10){
seemax = max(x[(i+n):(i+n+size-1)])
seemin = min(x[(i+n):(i+n+size-1)])
amax = which(x[(i+n):(i+n+size-1)] == seemax)[1]
amin = which(x[(i+n):(i+n+size-1)] == seemin)[1]
amax2 = i+n + amax -1
amin2 = i+n + amin -1
see = seemax - seemin
if(amax < amin){
gap = -1*see
}else{
gap = see
}
}
}
}
list_gap = c(list_gap, gap)
list_amin = c(list_amin, amin2)
list_amax = c(list_amax, amax2)
}
return( list( list_gap[which(abs(list_gap)== max(abs(list_gap)))][1],
list_amin[which(abs(list_gap)== max(abs(list_gap)))][1],
list_amax[which(abs(list_gap)== max(abs(list_gap)))][1] ))
}
slope_x = c()
slope_y = c()
for(u in userlist){
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
cids = subdat$caseid
for(cid in 1:length(cids)){
dat = read.csv(cids[cid], T)
if(ncol(dat)==4){
dat = dat[,c(1,3,4)]
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
amax_x = sliding2(dat[,2],30, 0)[[3]]
amin_y = sliding2(dat[,3],30, 0)[[2]]
amax_y = sliding2(dat[,3],30, 0)[[3]]
if(amin_x == 0){
dat[,2] = dat[,2] - min(dat[,2])
}else{
dat[,2] = dat[,2] - dat[amin_x,2]
}
if(amin_y == 0){
dat[,3] = dat[,3] - min(dat[,3])
}else{
dat[,3] = dat[,3] - dat[amin_y,3]
}
dat[,2] = dat[,2]/sx
dat[,3] = dat[,3]/sy
write.csv(dat,cids[cid],row.names = F )
}
}
dict = c('2. Test', '3. E-skin')
for(d in dict){
setwd( paste0( "C:/Users/ADMIN/Desktop/전주대/KIST_SNN논문/App 분류/IOT Data_P5/" , d) )
lf = list.files(getwd())
result = data.frame()
label = data.frame()
che1 = numeric()
if(grepl('E-skin', getwd())){
del = 1
}else{
del =0
}
for(j in 1:length(lf)){
if(j == 1000){
print("1000")
}else if(j == 2000){
print("2000")
}
filt1 = unlist(strsplit(lf[j], '.csv'))
filt2 = unlist(strsplit(filt1, '_'))
dat = read.csv(lf[j], T)
if(ncol(dat) == 3){
subdat = dat[,1:3]
}else{
subdat = dat[,c(1,3,4)]
}
if( as.numeric(filt2[3])-del == 0 ){
subdat$x = -250
subdat$y = 70
}else if(as.numeric(filt2[3])-del == 1){
subdat$x = -90
subdat$y = 160
}else if(as.numeric(filt2[3])-del == 2){
subdat$x = 90
subdat$y = 160
}else if(as.numeric(filt2[3])-del == 3){
subdat$x = 250
subdat$y = 70
}else if(as.numeric(filt2[3])-del == 4){
subdat$x = 250
subdat$y = -70
}else if(as.numeric(filt2[3])-del == 5){
subdat$x = 90
subdat$y = -160
}else if(as.numeric(filt2[3])-del == 6){
subdat$x = -90
subdat$y = -160
}else if(as.numeric(filt2[3])-del == 7){
subdat$x = -250
subdat$y = -70
}
if(is.element(lf[j],  unique(result$caseid))){
print(lf[j] )
subdat$caseid = paste(lf[j], dup , sep= '+dup')
dup = dup + 1
}else{
subdat$caseid = lf[j]
}
names(subdat)[2:3] = c('HEOG', 'VEOG')
result = rbind(result, subdat)
}
names(result)[2:3] = c('HEOG', 'VEOG')
result$VEOG = as.numeric(result$VEOG)
result$HEOG = as.numeric(result$HEOG)
result$x = as.numeric(result$x)
result$y = as.numeric(result$y)
result2 = result
result2 = result2[order(result2$caseid, result2$X_Value),]
gap_V = aggregate(result2[,c('VEOG')], by = list(result2$caseid), FUN= function(x){ sliding(x,30, 0)})
gap_H = aggregate(result2[,c('HEOG')], by = list(result2$caseid), FUN= function(x){ sliding(x,30, 0)})
names(gap_V) = c('caseid', 'gap_V')
names(gap_H) = c('caseid', 'gap_H')
########################################################################
# Outlier Filtering (노이즈 제거)
result3 = unique(result2[ ,c('caseid', 'x', 'y' )])
result4 = merge(result3, gap_V, by = 'caseid', all.x =  TRUE)
result4 = merge(result4, gap_H, by = 'caseid', all.x =  TRUE)
result4$userid = sapply(strsplit(result4$caseid, split= "_" ) , "[", 1)
userlist = unique(result4$userid)
k=1
slope_x = c()
slope_y = c()
for(u in userlist){
subdat = result4[which(result4$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
cooksd_x <- cooks.distance(res_x)
cooksd_y <- cooks.distance(res_y)
subdat = subdat[-which((cooksd_y <k*mean(cooksd_y))  & (cooksd_x <k*mean(cooksd_x))),]
print(nrow(subdat))
unlink(subdat$caseid)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
}
# 시각화: 개인차 존재 확인
library(ggplot2)
slope <- rep(slope_x, rep(2, length(slope_x)))
intercept <-rep(0, length(slope))
wf <-  rep(userlist, rep(2, length(slope_x))) # rep(1:20, rep(2, length(slope_x)))  #
x <- rep(c(-1,1), length(slope_x))
y <-  rep(c(-0.001,0.001), length(slope_x))
df <- data.frame(cbind(slope,intercept,x,y))
ggplot(data=df,
aes(x,y)) +
theme_bw() +
scale_x_continuous(limits=c(-1, 1))+
scale_y_continuous(limits=c(-0.001,0.001))+
geom_abline(data=df,aes(slope=slope,intercept=intercept,colour =factor(wf)))
# 개인차 보정
fl = list.files(getwd())
result5 = result4[which(is.element(result4$caseid, fl)),]
slope_x = c()
slope_y = c()
for(u in userlist){
print(u)
subdat = result5[which(result5$userid == u),]
res_x = lm( gap_H ~ x, subdat)
res_y = lm( gap_V ~ y, subdat)
sx = summary(res_x)$coefficients[2,1]
sy = summary(res_y)$coefficients[2,1]
result5[which(result5$userid == u), 'gap_H'] = subdat$gap_H/sx
result5[which(result5$userid == u), 'gap_V'] = subdat$gap_V/sy
slope_x = c(slope_x, sx)
slope_y = c(slope_y, sy)
cids = subdat$caseid
for(cid in 1:length(cids)){
dat = read.csv(cids[cid], T)
if(ncol(dat)==4){
dat = dat[,c(1,3,4)]
}
amin_x = sliding2(dat[,2],30, 0)[[2]]
amax_x = sliding2(dat[,2],30, 0)[[3]]
amin_y = sliding2(dat[,3],30, 0)[[2]]
amax_y = sliding2(dat[,3],30, 0)[[3]]
if(amin_x == 0){
dat[,2] = dat[,2] - min(dat[,2])
}else{
dat[,2] = dat[,2] - dat[amin_x,2]
}
if(amin_y == 0){
dat[,3] = dat[,3] - min(dat[,3])
}else{
dat[,3] = dat[,3] - dat[amin_y,3]
}
dat[,2] = dat[,2]/sx
dat[,3] = dat[,3]/sy
write.csv(dat,cids[cid],row.names = F )
}
}
}
d
